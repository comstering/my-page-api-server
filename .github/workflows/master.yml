name: CD Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  unittest:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      # 현재 레포지토리 코드 업로드
      - name: Checkout my code
        uses: actions/checkout@v2

      # 정상적으로 clone 되었는지 확인
      - name: Run pwd
        run: pwd
      - name: Check directory
        run: ls -al

      # Java JDK 설치
      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      # 유닛 테스트
      - name: Run Unit Test
        run:
          ./gradlew test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: unittest

    steps:
      # 현재 레포지토리 코드 업로드
      - name: Checkout my code
        uses: actions/checkout@v2

      # JAVA 빌드
      - name: Spring Build, Make .jar
        run:
          ./gradlew build

      # Docker 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Docker 빌드
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Docker image 설정
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: comstering/my-page-api-server

      # Docker Hub 로그인, GitHub Secret 사용
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Build, Docker Hub Push
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    # commit push일 경우에만 배포
    if: ${{ github.event_name != 'pull_request' }}
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    # 배포는 추후 작성
    steps:
      # Oracle Cloud SSH 로그인 세팅
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{ secrets.OCI_USER_OCID }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_FINGERPRINT }}" >> ~/.oci/config
          echo "region=${{ secrets.OCI_REGION }}" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_TENANCY_OCID }}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{ secrets.OCI_KEY_FILE }}" >> ~/.oci/key.pem

      # Install Oracle Cloud CLI
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      # 설정 파일 권한 변경
      - name: Fix Config File Permissions
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem

      # 배포할 인스턴스 IP 획득
      - name: Get Instance IP
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{ secrets.OCI_INSTANCE_OCID }} \
            --query 'data [0]."public-ip"' \
            --raw-output \
          )" >> $GITHUB_ENV

      # SSH 접속 기다리기
      - name: Wait For SSH
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
            sleep 5
            echo "SSH not available..."
          done; echo "SSH ready!"

      # 배포
      - name: Start App
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.OCI_INSTANCE_SSH_KEY }}
          script:
            docker stop my-page-api-server && docker pull comstering/my-page-api-server:latest && docker run --rm -d --name my-page-api-server -p 80:8080 comstering/my-page-api-server:latest